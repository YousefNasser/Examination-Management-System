package GUI;

import Entities.*;

import java.awt.Font;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.time.LocalDate;
import java.util.Vector;
import javax.swing.*;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

/**
 * AddNewInstructor is a class which admin can add a new instructor to database of the system
 * By filling some of instructor basic data through some text areas and comboBoxes.
 * The data entered in text areas and comboBoxes are checked whether it is valid or not through some validating function.
 *
 * @author Steven Sameh
 */
public class AddNewInstructor extends javax.swing.JFrame {

    Admin admin;
    final static private int deltaXLabelCombo = 15;
    private JComboBox<Integer> yearComboBox, monthComboBox, dayComboBox;
    private final DefaultListCellRenderer listRenderer;
    private Vector<Integer> days;
    private Pattern pattern;
    private Matcher matcher;
    private final java.awt.Font addNewInstructorFont = new java.awt.Font("Tahoma", Font.BOLD, 14);
    private final java.awt.Font addNewInstructorFont1 = new java.awt.Font("Tahoma", Font.BOLD, 13);

    /**
     * Creates new form AddNewInstructor
     */

    public AddNewInstructor(Admin admin) {
        this.admin = admin;
        initComponents();
        // Setting the Alignment of the items in the list
        listRenderer = new DefaultListCellRenderer();
        listRenderer.setHorizontalAlignment(DefaultListCellRenderer.CENTER);
        showDatePortion();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultState="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        javax.swing.JLabel title = new javax.swing.JLabel();
        javax.swing.JButton logoutButton = new javax.swing.JButton();
        // Variables declaration - do not modify//GEN-BEGIN:variables
        javax.swing.JButton backButton = new javax.swing.JButton();
        javax.swing.JLabel username = new javax.swing.JLabel();
        javax.swing.JLabel firstName = new javax.swing.JLabel();
        javax.swing.JLabel middleName = new javax.swing.JLabel();
        javax.swing.JLabel lastName = new javax.swing.JLabel();
        javax.swing.JLabel birthDate = new javax.swing.JLabel();
        javax.swing.JLabel mobileNumber = new javax.swing.JLabel();
        javax.swing.JLabel email = new javax.swing.JLabel();
        javax.swing.JLabel password = new javax.swing.JLabel();
        javax.swing.JButton addButton = new javax.swing.JButton();
        UsernameTextField = new javax.swing.JTextField();
        middleNameTextField = new javax.swing.JTextField();
        emailTextField = new javax.swing.JTextField();
        lastNameTextField = new javax.swing.JTextField();
        firstNameTextField = new javax.swing.JTextField();
        passwordTextField = new javax.swing.JPasswordField();
        mobileNumberTextField = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(134, 171, 161));

        title.setFont(new java.awt.Font("Tahoma", Font.BOLD, 24)); // NOI18N
        title.setText("Add New Instructor");

        logoutButton.setFont(addNewInstructorFont1); // NOI18N
        logoutButton.setText("Logout");
        logoutButton.addActionListener(evt -> LogoutButtonActionPerformed());

        backButton.setFont(addNewInstructorFont1); // NOI18N
        backButton.setText("Back");
        backButton.addActionListener(evt -> BackButtonActionPerformed());


        //Set the font name, style and size to the labels.
        //Set the text to the labels.

        username.setFont(addNewInstructorFont); // NOI18N
        username.setText("Username");

        firstName.setFont(addNewInstructorFont); // NOI18N
        firstName.setText("First Name");

        middleName.setFont(addNewInstructorFont); // NOI18N
        middleName.setText("Middle Name");

        lastName.setFont(addNewInstructorFont); // NOI18N
        lastName.setText("Last Name");

        birthDate.setFont(addNewInstructorFont); // NOI18N
        birthDate.setText("Birth Date");

        mobileNumber.setFont(addNewInstructorFont); // NOI18N
        mobileNumber.setText("Mobile Number");

        email.setFont(addNewInstructorFont); // NOI18N
        email.setText("Email");

        password.setFont(addNewInstructorFont); // NOI18N
        password.setText("Password");

        addButton.setText("Add");
        addButton.addActionListener(evt -> addButtonActionPerformed());

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
                jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(19, 19, 19)
                                .addComponent(backButton)
                                .addGap(195, 195, 195)
                                .addComponent(title)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(logoutButton)
                                .addGap(24, 24, 24))
                        .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(346, 346, 346)
                                .addComponent(addButton)
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(64, 64, 64)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(jPanel1Layout.createSequentialGroup()
                                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(username)
                                                        .addComponent(middleName)
                                                        .addComponent(birthDate)
                                                        .addComponent(email))
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(firstName)
                                                        .addComponent(lastName)
                                                        .addComponent(mobileNumber)
                                                        .addComponent(password))
                                                .addGap(195, 195, 195))
                                        .addGroup(jPanel1Layout.createSequentialGroup()
                                                .addComponent(UsernameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(firstNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(109, 109, 109))
                                        .addGroup(jPanel1Layout.createSequentialGroup()
                                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(emailTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addComponent(middleNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addGroup(jPanel1Layout.createSequentialGroup()
                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                                .addComponent(lastNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                .addGap(109, 109, 109))
                                                        .addGroup(jPanel1Layout.createSequentialGroup()
                                                                .addGap(247, 247, 247)
                                                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                                        .addComponent(passwordTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                        .addComponent(mobileNumberTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                                .addContainerGap(109, Short.MAX_VALUE))))))
        );
        jPanel1Layout.setVerticalGroup(
                jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(16, 16, 16)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addGroup(jPanel1Layout.createSequentialGroup()
                                                .addComponent(firstName)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(firstNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(jPanel1Layout.createSequentialGroup()
                                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                        .addComponent(backButton)
                                                        .addComponent(logoutButton)
                                                        .addComponent(title))
                                                .addGap(84, 84, 84)
                                                .addComponent(username)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(UsernameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(49, 49, 49)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addGroup(jPanel1Layout.createSequentialGroup()
                                                .addComponent(middleName)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(middleNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(jPanel1Layout.createSequentialGroup()
                                                .addComponent(lastName)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(lastNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(42, 42, 42)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addGroup(jPanel1Layout.createSequentialGroup()
                                                .addComponent(birthDate)
                                                .addGap(36, 36, 36))
                                        .addGroup(jPanel1Layout.createSequentialGroup()
                                                .addComponent(mobileNumber)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(mobileNumberTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(32, 32, 32)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                                .addComponent(email)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(emailTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                                .addComponent(password)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(passwordTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 18, Short.MAX_VALUE)
                                .addComponent(addButton)
                                .addGap(97, 97, 97))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void LogoutButtonActionPerformed() {//GEN-FIRST:event_LogoutButtonActionPerformed
        new Login().setVisible(true);
        dispose();
    }//GEN-LAST:event_LogoutButtonActionPerformed

    private void BackButtonActionPerformed() {//GEN-FIRST:event_BackButtonActionPerformed
        new AdminDashboard(admin.getUsername()).setVisible(true);
        dispose();
    }//GEN-LAST:event_BackButtonActionPerformed

    private void addButtonActionPerformed() {//GEN-FIRST:event_addButtonActionPerformed
        if (isAllWhiteSpaces(UsernameTextField.getText()) || isAllWhiteSpaces(firstNameTextField.getText())
                || isAllWhiteSpaces(middleNameTextField.getText()) || isAllWhiteSpaces(lastNameTextField.getText())
                || isAllWhiteSpaces(emailTextField.getText())
                || isAllWhiteSpaces(mobileNumberTextField.getText()) || isAllWhiteSpaces(passwordTextField.getText())) {
            //This message appear if the user try to press add button without filling all data.
            JOptionPane.showMessageDialog(null, "You should fill out all text fields", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        } else if (User.isUsernameExisted(UsernameTextField.getText())) {// This message appear if the user try to enter an existing username.
            JOptionPane.showMessageDialog(null, "This username is already in use", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        } else if (!mobileNumberValidation()) { //This message appear if the user try to enter a mobile number that does not contain numbers only [0-9].
            JOptionPane.showMessageDialog(null, "This mobile number is invalid.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        } else if (!passwordValidation()) { //This message appear if the user try to enter a password that does not comply with the conditions.
            JOptionPane.showMessageDialog(null, "The Password should contain: at least 8 characters and numbers, one special character, one Uppercase Letter and one Lowercase Letter.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        } else if (!emailValidation()) { //This message appear if the user try to enter email that does not comply with the conditions
            JOptionPane.showMessageDialog(null, "This Email is invalid.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        } else if (!nameValidation()) { //This message appear if the user try to enter a name that contains forbidden characters .. only ([a-zA-Z], [0-9]) are allowed.
            JOptionPane.showMessageDialog(null, "Numbers and special character are not allowed in name fields.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }


        int year = (int) yearComboBox.getSelectedItem(); // Get the choice of the user from the (year) comboBox and assign it to an int variable
        int month = (int) monthComboBox.getSelectedItem(); // Get the choice of the user from the (month) comboBox and assign it to an int variable
        int day = (int) dayComboBox.getSelectedItem(); // Get the choice of the user from the (day) comboBox and assign it to an int variable
        LocalDate instructorBirthDate = LocalDate.of(year, month, day);

        /*
        create a new instructor with the new data from the
        (UsernameTextField,emailTextField,firstNameTextField,lastNameTextField,middleNameTextField,mobileNumberTextField,passwordTextField) text fields.
         */
        Instructor newInstructor = new Instructor(UsernameTextField.getText(), mobileNumberTextField.getText(), emailTextField.getText(),
                firstNameTextField.getText(), middleNameTextField.getText(), lastNameTextField.getText(), instructorBirthDate, passwordTextField.getText());

        //add the instructor in the database.
        newInstructor.add();

        //Inform the Admin that the operation is done successfully (if the admin follow the conditions of each input field.
        JOptionPane.showMessageDialog(null, "Add Instructor successfully", "", JOptionPane.INFORMATION_MESSAGE);

        //Redirect the admin to his dashboard once he finished.
        new AdminDashboard(admin.getUsername()).setVisible(true);

        //to open the new window and close the old one.
        dispose();
    }//GEN-LAST:event_addButtonActionPerformed

    /**
     * Validate the entered name.
     *
     * @return true if the pattern is found; false otherwise.
     */
    private boolean nameValidation() {
        pattern = Pattern.compile("^[a-zA-Z]{3,99}$");
        matcher = pattern.matcher(firstNameTextField.getText() + middleNameTextField.getText() + lastNameTextField.getText());
        return matcher.find();
    }

    /**
     * Validate the entered password.
     *
     * @return true if the pattern is found; false otherwise.
     */
    private boolean passwordValidation() {
        pattern = Pattern.compile("^(?=.*\\d)(?=.*[A-Z])(?=.*[a-z])(?=.*[^\\w\\d\\s:])([^\\s]){8,123}$");
        matcher = pattern.matcher(passwordTextField.getText());
        return matcher.find();
    }

    /**
     * Validate the entered email.
     *
     * @return true if the pattern is found; false otherwise.
     */
    private boolean emailValidation() {
        pattern = Pattern.compile("^((?!\\.)[\\w_.]*[^.])(@\\w+)(\\.\\w+(\\.\\w+)?[^.\\W])$");
        matcher = pattern.matcher(emailTextField.getText());
        return matcher.find();
    }

    /**
     * Validate the entered Mobile Number.
     * return true if it can be parsed into long.
     *
     * @return true if the mobileNumberTextField text consists of ONLY numbers; false otherwise.
     */
    private boolean mobileNumberValidation() {
        try {
            Long.parseLong(mobileNumberTextField.getText());
            return true;
        } catch (Exception e) {
            return false;
        }
    }

    /**
     * Checking if the data is empty or not.
     * if the whole string is whitespaces it returns true
     * else it returns false
     *
     * @param data string variable that carry the data (password, email, etc..) to check if it is empty or not.
     * @return True if the string's length equals the whitespaces count; false otherwise.
     */
    private boolean isAllWhiteSpaces(String data) {
        int whiteSpaceFreq = 0;
        for (char c : data.toCharArray()) {
            if (c == ' ')
                whiteSpaceFreq++;
        }
        return whiteSpaceFreq == data.length();
    }

    /**
     * Rendering date portion
     */
    private void showDatePortion() {
        // A base X and Y positions so that changing multiple component at once would be easily done.
        int baseXPosition = -3;
        int baseYPosition = 360;

        // Creating a Label for the date portion and setting its properties
        // Initializing a ComboBox to hold years in range CURRENT_YEAR : Exam.getYearLimit() and setting its properties
        yearComboBox = new JComboBox<>();
        yearComboBox.setBounds(baseXPosition + 210 + deltaXLabelCombo, baseYPosition, 70, 30);

        // Creating years vector to store the years in the valid range.
        Vector<Integer> years = new Vector<>();
        for (int yearIterator = 1900; yearIterator <= 2020; ) {
            years.add(yearIterator++);
        }

        // Adding years vector to the comboBox list of items.
        yearComboBox.setModel(new DefaultComboBoxModel<>(years));

        // Centering the items in the comboBox
        yearComboBox.setRenderer(listRenderer);

        // Setting the font to the comboBox
        yearComboBox.setFont(addNewInstructorFont1);

        // Setting the selected Item to the current Year
        yearComboBox.setSelectedItem(1900);

        // Adding the yearComboBox to the panel
        jPanel1.add(yearComboBox);

        // Initializing months vector to store the months in the valid range.
        monthComboBox = new JComboBox<>();
        monthComboBox.setBounds(baseXPosition + 130 + deltaXLabelCombo, baseYPosition, 70, 30);

        // Initializing a vector to store the months in the comboBox.
        Vector<Integer> months = new Vector<>();
        for (int monthIterator = 1; monthIterator <= 12; ) {
            months.add(monthIterator++);
        }

        // Adding months vector to the comboBox list of items.
        monthComboBox.setModel(new DefaultComboBoxModel<>(months));

        // Centering the items in the comboBox
        monthComboBox.setRenderer(listRenderer);

        // Setting the font to the comboBox
        monthComboBox.setFont(addNewInstructorFont1);

        // Setting the selected item to the current month
        monthComboBox.setSelectedItem(1);

        // Adding the monthComboBox to the panel
        jPanel1.add(monthComboBox);

        // Creating ComboBox to hold month in range 1 : 12 and setting its properties
        dayComboBox = new JComboBox<>();
        dayComboBox.setBounds(baseXPosition + 50 + deltaXLabelCombo, baseYPosition, 70, 30);

        // Initializing days vector to store the days in the valid range
        days = new Vector<>();

        //setting the dayLimit
        int dayLimit = getDayLimit((int) monthComboBox.getSelectedItem(), (int) yearComboBox.getSelectedItem());
        for (int dayIterator = 1; dayIterator <= dayLimit; ) {
            days.add(dayIterator++);
        }

        // Adding days vector to the comboBox list of items.
        dayComboBox.setModel(new DefaultComboBoxModel<>(days));

        // Centering the items in the comboBox
        dayComboBox.setRenderer(listRenderer);

        // Setting the font to the comboBox
        dayComboBox.setFont(addNewInstructorFont1);

        // Setting the selected item to the current day
        dayComboBox.setSelectedItem(1);

        // adding the dayComboBox to the panel
        jPanel1.add(dayComboBox);

        // Creating an action listener instance to track whatever changes might occur while running
        PageActionListener listener = new PageActionListener();

        // Adding the Action Listener to the comboBox-es
        yearComboBox.addActionListener(listener);
        monthComboBox.addActionListener(listener);

    }

    /**
     * checks if the year is leap or not.
     * return true if the year is divisible by 4 and divisible by 100 and divisible by 400.
     * return true if the year is divisible by 4 and not divisible by 100.
     *
     * @param year int variable carry the year
     * @return true if the year is a leap year; false otherwise.
     */

    boolean leapYear(int year) {
        if (year % 4 == 0) {
            if (year % 100 == 0) {
                return year % 400 == 0;
            } else {
                return true;
            }
        } else {
            return false;
        }
    }

    /**
     * It checks which month and returns its fixed limit and if it's February,
     * checks for leap year as well.
     *
     * @param month the month in question
     * @param year  the year in question
     * @return how many days in the month and the year in question
     */
    private int getDayLimit(int month, int year) {
        switch (month) {
            case 2:
                if (leapYear(year)) {
                    return 29;
                } else {
                    return 28;
                }
            case 4:
            case 6:
            case 9:
            case 11:
                return 30;
            default:
                break;
        }
        return 31;
    }

    /**
     * Allow or deny the resizability of AddNewInstructor window,
     * It will be resizable if true; otherwise resizability will be denied.
     *
     * @param resizable boolean the value to which the Resizability of the window is set.
     */
    @Override
    public void setResizable(boolean resizable) {
        super.setResizable(resizable);
    }

    /**
     * This method refreshes the day list so that every day available
     * to the instructor to choose is a valid day.
     * It does that by clearing the day vector, checks the lower limit
     * for the month list and adds all the month from the lower limit up
     * to the upper limit returned from getDayLimit(selectedMonth, selectedYear).
     */
    void refreshDayList() {
        // Declaring the day iterator variable
        int dayIterator = 1, selectedDay = (int) dayComboBox.getSelectedItem(),
                dayLimit = getDayLimit((int) monthComboBox.getSelectedItem(), (int) yearComboBox.getSelectedItem()); //setting the dayLimit

        // clearing days vector
        days.clear();

        // filling the vector with the newly chosen month days range
        while (dayIterator <= dayLimit) {
            days.add(dayIterator++);
        }

        // Adding days vector to the comboBox list of items.
        dayComboBox.setModel(new DefaultComboBoxModel<>(days));

        // Getting the current month to avoid erasing the user's selection if not necessary
        if (selectedDay > dayLimit) selectedDay = dayLimit;
        dayComboBox.setSelectedItem(selectedDay);

    }

    private class PageActionListener implements ActionListener {
        @Override
        public void actionPerformed(ActionEvent event) {
            if (event.getSource() == yearComboBox || event.getSource() == monthComboBox) {
                refreshDayList();
            }
        }
    }

    private javax.swing.JTextField UsernameTextField;
    private javax.swing.JTextField emailTextField;
    private javax.swing.JTextField firstNameTextField;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JTextField lastNameTextField;
    private javax.swing.JTextField middleNameTextField;
    private javax.swing.JTextField mobileNumberTextField;
    private javax.swing.JPasswordField passwordTextField;
    // End of variables declaration//GEN-END:variables
}
