/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Entities;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.time.*;
import java.util.Date;
import javax.xml.transform.Result;
import javax.xml.transform.Source;

/**
 *
 * @author yn653, Steven Sameh, Yusuf Nasser, Ayman Hassasn
 */
public class Exam implements SqlEntity {
    
    /*
     * All the attributes of the Exam Class   
    */
    // TBC
    /** Yusuf Nasser writing, Ayman Hassan on Zoom 10th Jan 2021, 16:18
     * Naming convention of static final in java is in SCREAMING_SNAKE_CASE
     * reference: shorturl.at/dltGK
     * Variable was made by Yusuf Nader, He's more equipped to answer for that
     * but yet it's obvious, it's made to limit the number of questions an examiner
     * can input in a test.
    */
    
    final static private int MAX_QUESTION = 50;
    
    final private int id;
    private Class examClass;
    private String instructorName;
    private String name;
    private LocalTime startTime, endTime;
    private LocalDate date;
    private Duration duration;
    private boolean isFilled;
    private boolean isPublished;
    
    
    /*
     * This constructor initializes all the final attributes of the class
    */

    public Exam(int id, Class examclass, String instructorName) {
        this.id = id;
        this.examClass = examclass;
        this.instructorName = instructorName;
        this.endTime = startTime.plus(duration);
    }
    
    /** Note left by Ziad Khobeiz and Abdel-Aziz Mostafa on https://www.notion.so/Meeting-Notes-ddad1da729614ee9b04ef04fd54faef4
	GENERAL NOTE: FOR ALL CLASSES (NOT ONLY THIS CLASS)
	Since the id is generated by DB sequence (.nextval), the id will be removed from the constructor
    */
    
    /** Yusuf Nasser writing, Ayman Hassan on Zoom 10th Jan 2021, 16:26
     * We will still need the id attribute to store the id in it
     * ID will be generated in the constructor
     * 
     * On the matter of removing the course object, we won't remove it until further
     * discussions and arguments provided.
    */
    
    public Exam(int id) {
        this.id = id;
    }
    
    public static int getMaxQuestion() {
        return MAX_QUESTION;
    }
    /**
     * Ayman Hassan, Ziad Khobeiz
     * finished fillData function
     * retrieve all the Exam data from the Database
     * 
     */
    @Override
    public void fillData() {
        isFilled=true;
        Connection myConnection = SqlConnection.getConnection();
        try {
            PreparedStatement myStatement = myConnection.prepareStatement("select STARTTIME, ENDTIME, NAME, CLASSID, isPublished FROM EXAM where EXAMID = ?");
            myStatement.setInt(1, id);
            ResultSet myResultSet = myStatement.executeQuery();
            if (myResultSet.next()) {
                date = myResultSet.getTimestamp(1).toLocalDateTime().toLocalDate();
                startTime = myResultSet.getTimestamp(1).toLocalDateTime().toLocalTime();
                endTime = myResultSet.getTimestamp(2).toLocalDateTime().toLocalTime();
                name = myResultSet.getString(3);
                examClass = new Class(myResultSet.getInt(4),false);
                isPublished = myResultSet.getString(5).equals("Y");
                duration = Duration.between(startTime,endTime);
           }
            myConnection.close();
        } catch (Exception e) {
            System.out.println(e);
        }
        
    }

    @Override
    public void add() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void update() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void delete() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }
    /*
     * All the setters functions of the class: startTime, date, duration, validationStatus
     * @Note endTime will be derived from duration and startTime
    */
    public void setStartTime(LocalTime startTime) {
        this.startTime = startTime;
    }

    public void setDate(LocalDate date) {
        this.date = date;
    }

    public void setDuration(Duration duration) {
        this.duration = duration;
    }

    
    /*
     * All the getter functions of the Exam class
     * @Note endTime getter function is derived from duration and startTime
    */
    public int getId() {
        return id;
    }

    public Class getExamClass() {
        
        if(!isFilled) {
            fillData();
        }
        return examClass;
    }

   

    public String getInstructorName() {
        if(!isFilled) {
            fillData();
        }
        return instructorName;
    }

    public LocalTime getStartTime() {
        if(!isFilled) {
            fillData();
        }
        return startTime;
    }

    public LocalTime getEndTime() {
        if(!isFilled) {
            fillData();
        }
        return endTime;
    }

    public LocalDate getDate() {
        if(!isFilled) {
            fillData();
        }
        return date;
    }

    public Duration getDuration() {
        if(!isFilled) {
            fillData();
        }
        return duration;
    }

    public boolean isRunning() {
        if(!isFilled) {
            fillData();
        }
        return startTime.compareTo(java.time.LocalTime.now()) <= 0 && endTime.compareTo(java.time.LocalTime.now()) > 0;
    }
    
    public boolean isFinished() {
        if(!isFilled) {
            fillData();
        }
        return endTime.compareTo(java.time.LocalTime.now()) <= 0;
    }

    public String getName() {
        if(!isFilled) {
            fillData();
        }
        return name;
    }
    
}
